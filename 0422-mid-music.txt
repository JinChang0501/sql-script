create database music_project;

use music_project;

create table members(
member_id int primary key auto_increment,
member_firstname varchar(50),
member_lastname varchar(50),
member_email varchar(50),
member_password varchar(30),
member_phone_number varchar(20),
member_address varchar(50)
);

-- paomin
create table employees(
employee_id int primary key auto_increment,
employee_firstname varchar(50),
employee_lastname varchar(50),
employee_email varchar(50),
employee_password varchar(30),
employee_phone_number varchar(20)
);

CREATE TABLE activities (
    id INT AUTO_INCREMENT PRIMARY KEY,
    activity_class INT,
    FOREIGN KEY (activity_class) references aclass(id),
    activity_name VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    location VARCHAR(100) NOT NULL,
    description TEXT,
    organizer VARCHAR(100) NOT NULL,
    artist_id INT,
    FOREIGN KEY (artist_id) references artist(id)
);

CREATE TABLE aclass (
id INT AUTO_INCREMENT PRIMARY KEY,
class VARCHAR(100) NOT NULL
);



-- Ming

create table login_user(
id int not null primary key auto_increment
);

create table concert(
id int not null primary key auto_increment
);

create table seat (
id int not null primary key auto_increment,
seat_area varchar(100) not null,
seat_number varchar(100) not null
);

create table pay(
id int not null primary key auto_increment,
pay_name varchar(100) not null,
pay_info varchar(300) not null,
user_id int not null,
foreign key (user_id) references login_user(id) 
);

create table music_festival_ticket(
id int not null primary key auto_increment,
music_festival_id int not null,
ticket_count int not null,
ticket_price int not null,
foreign key (music_festival_id) references concert(id)
);

create table concert_ticket(
id int not null primary key auto_increment,
concert_id int not null,
seat_id int not null,
ticket_count int not null,
ticket_price int not null,
foreign key (concert_id) references concert(id),
foreign key (seat_id) references seat(id)
);

create table music_festival_order(
id int not null primary key auto_increment,
user_id int not null,
music_festival_id int not null,
ticket_id int not null,
pay_id int not null,
foreign key (user_id) references login_user(id),
foreign key (music_festival_id) references concert(id),
foreign key (ticket_id) references music_festival_ticket(id),
foreign key (pay_id) references pay(id)
);

create table concert_order(
id int not null primary key auto_increment,
user_id int not null,
concert_id int not null,
seat_id int not null,
ticket_id int not null,
pay_id int not null,
foreign key (user_id) references login_user(id),
foreign key (concert_id) references concert(id),
foreign key (seat_id) references seat(id),
foreign key (ticket_id) references concert_ticket(id),
foreign key (pay_id) references pay(id)
);





-- Alice
create Table order_details (
  order_id int primary key auto_increment,
  product_id integer,
  unit_price int,
  quantity int,
  discount int,
  created_at datetime,
  foreign key (product_id) references products(id)  
);
-- 商品
create Table products (
  id int primary key auto_increment,
  product_name varchar(100),
  category_id int,
  supplier_id int,
  unit_price int,
  units_instock int,
  units_on_order int,
  discontinued varchar(50)
);
-- 供應商
create Table suppliers (
  supplier_id int primary key auto_increment,
  company_name varchar(100),
  contact_name varchar(100),
  contact_title varchar(50),
  address varchar(200),
  city_or_county varchar(100),
  postal_code int,
  country varchar(100), 
  phone int,
  fax int,
  email varchar(200)
);

-- 目錄
create table categories (
category_id int primary key auto_increment,
category_name varchar(100),
descriptions varchar(200),
picture varchar(100)
);

-- Daniel
CREATE TABLE artist(
artist_Id INT AUTO_INCREMENT PRIMARY KEY,
artist_Name varchar(50),
artist_Followers INT,
artist_Introduction text,
artist_DebutDate DATETIME,
artist_Album varchar(50),
artist_AlbumDate datetime
);